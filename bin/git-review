#!/bin/bash

this=$(basename "$0")

# default settings
explain=false
verbose=true
run=true

# colors
RED="\033[0;31m"
YELLOW="\033[1;33m"
GREEN="\033[0;32m"
NO_COLOR="\033[0m"
BOLD="\033[1m"
UNDERLINE="\033[4m"

die() {
	echo -e "${RED}${@}${NO_COLOR}"
	exit 1
}

warn() {
	echo -e "${YELLOW}${@}${NO_COLOR}"
}

good() {
	echo -e "${GREEN}${@}${NO_COLOR}"
}

# Check commands
GIT=$(which git)
if [[ -z "$GIT" ]]; then
	die "git is not installed"
fi

SSH=$(which ssh)
if [[ -z "$SSH" ]]; then
	die "ssh is not installed"
fi

GERRIT_CHERRY_PICK=$(which gerrit-cherry-pick)

if [[ -z "$GERRIT_CHERRY_PICK" ]]; then
	die "gerrit-cherry-pick is not installed"
fi

# creates a new unique output file by using the current process ID
GIT_OUTPUT_FILE="/tmp/git_output$$"

GIT_DIR=$($GIT rev-parse --git-dir 2>/dev/null)

if [[ -z "$GIT_DIR" ]]; then
	die "$this can only be run from a git repository."
fi

CURRENT=$($GIT symbolic-ref -q HEAD || $GIT rev-parse HEAD)
CURRENT=${CURRENT#refs/heads/}

git() {
	if [[ "$verbose" = true ]]; then
		echo -e "+ ${GREEN}git $@${NO_COLOR}"
	fi

	if [[ "$run" = true ]]; then
		$GIT $@ 2>&1 | tee /dev/tty > $GIT_OUTPUT_FILE
		return ${PIPESTATUS[0]}
	fi
}
gerrit-cherry-pick() {
if [[ "$verbose" = true ]]; then
	echo -e "+ ${GREEN}gerrit-cherry-pick $@${NO_COLOR}"
fi

if [[ "$run" = true ]]; then
	$GERRIT_CHERRY_PICK $@ 2>&1 | tee /dev/tty > $GIT_OUTPUT_FILE
	return ${PIPESTATUS[0]}
fi
}
ssh() {
if [[ "$verbose" = true ]]; then
	echo -e "+ ${GREEN}ssh $@${NO_COLOR}"
fi

if [[ "$run" = true ]]; then
	$SSH $@ 2>&1 | tee /dev/tty > $GIT_OUTPUT_FILE
	return ${PIPESTATUS[0]}
fi
}

trap _cleanup_git_output EXIT

_cleanup_git_output() {
	rm -f $GIT_OUTPUT_FILE
}

no_changes () {
	$GIT diff-index --quiet --cached HEAD -- &&
		$GIT diff-files --quiet
}

is_integer() {
	[[ "$1" = [0-9]* ]] > /dev/null 2>&1
	return $?
}

is_review_branch() {
	local branch=$1
	if [[ "${branch:0:1}" = "r" ]]; then
		local change=${branch:1}
		if is_integer $change; then
			return 0
		fi
	fi
	return 1
}

ask_yes_no() {
	while true; do
		read -p "$1 [y/n]: " choice
			case $choice in
				y|Y|yes|Yes|YES)
					return 0
					;;
				n|no|No|NO)
					return 1
					;;
				*)
					warn "Please choose either y or n"
					;;
			esac
	done
}

get_change_number_from_branch() {
	if is_review_branch $CURRENT; then
		CHANGE=${CURRENT:1}
		if [[ $verbose = true ]]; then
			good "Using change number $CHANGE from branch name"
		fi
		return 0
	fi
	return 1
}

patch_count_for_change() {
	local change_id=$1
	local hash=$(($change_id % 100))
	case $hash in
		[0-9]) hash="0$hash" ;;
	esac

	$GIT ls-remote $REMOTE "refs/changes/$hash/$change_id/*" | \
		sed 's/.*\///g' | sort -n | tail -n1
}

printShortUsage() {
	cat << EOF
Usage: $this [<options>] <change number>
   or: $this [<options>] approve
   or: $this [<options>] diff [<patchset1> [<patchset2>]]
   or: $this [<options>] open [<change number>]
   or: $this [<options>] push
   or: $this [<options>] rebase [<change number>]
   or: $this [<options>] reset [-f]
   or: $this [<options>] update
   Options are: -e (explain) -v (verbose) -c (change number)
                -q (quite)   -h (help)
EOF
}
printUsage() {
	printShortUsage

	cat << EOF

OPTIONS
  -h  --help                  Show this message
  -v  --verbose               Show all commands before running them (default: on)
  -q  --quiet                 Don't display commands before running them (default: off)
  -e  --explain  --dry-run    Don't actually run commands (default: off)
  -c <change number>          Force this change number (default: autodetect)

DESCRIPTION
  $this assists in code reviews with gerrit, both pushing or pulling changesets
    to review.

  <change number>
    Applies the latest patch for the change at <change number> on top of the current
    branch, if it's a tracking branch, or master on a branch named for <change number>,
    allowing you to review the change.

  approve
    Approves the current patch but does not merge it.
    You will be promted for your vote and for a message.

  diff [<patch number> [<patch number>]]
    Depending of the number of arguments, displays a diff of
      (0) the last two patchsets.
      (1) the given patchset und the last patchset.
      (2) the given patchsets. You can swap the two numbers to get an inverse diff.
      (3) a specific change specified with <change> <patchset1> <patchset2>. Giving a
          change number means you can use this command without being on a review branch.

  open <change number>
    Prints the current review URL. If the BROWSER variable is set, it will use it to
    open the URL in the your specified browser.
    If a change number is given, it will use that instead of trying to automatically
    determine it bases on the current branch.

  push
    Pushes a single patch (or - if confirmed - multiple patches) to gerrit for review.
    If you are not on a review branch, you need to confirm the branch to push to and
    you may choose a topic.

    If your HEAD is a tracking branch $this will promt to reset it to the remote
    branch after successfully pushing the changeset.
    If you are working on a non-tracking branch, that branch will be left alone.

    If you are on a review branch or if you have specified a change number with -c
    (see above), the current patch will be added as a new patchset, following
    the same reset rules as above.

    NOTE: If the BROWSER environment variable is set, the Gerrit page for the pushed
    change will be opened in that browser (e.g. "open" or "/usr/local/bin/firefox"),
    otherwise the URL will be displayed.

  rebase [<change number>]
    Rebases the latest patch for a given change number (or the current change branch)
    against tracking branch, then submits it as a new patch to that change.
    This helps deal with Gerrit's "Your change could not be merged due to a path
    conflict" error message.

  reset [-f]
    Removes the current change branch created by the "start" subcommand and switches
    back to tracking branch.
    Use -f to reset if the current branch has uncommitted changes, otherwise reset will
    refuse to do this.
    If the the current branch does not start with "r" followed by an integer, nothing
    will be done and $this exists with an error.

  update
    Updates the review branch that you are currently on to the latest patch.
EOF
}


getBranchInfo() {
	REMOTE=`$GIT config branch.$CURRENT.remote`

	if [[ -z "$REMOTE" ]]; then
		REMOTE=origin
	fi

	TRACK=`$GIT config branch.$CURRENT.merge`

	if [[ -n "$TRACK" ]]; then
		TRACK=${TRACK#refs/heads/}
	fi

	if [[ -z "$TRACK" ]]; then
		if [[ -e "$GIT_DIR/TRACK" ]]; then
			TRACK=$(cat "$GIT_DIR/TRACK")
		elif [[ -z "$TRACK" ]]; then
			TRACK=master
		fi
	fi

	echo "$TRACK" > "$GIT_DIR/TRACK"
}

pushReview() {
	abort_on_bad_repo_state

	local LOG=$($GIT log --pretty="format:%s" $REMOTE/$TRACK..HEAD)
	local CHANGESETS=$($GIT rev-list $REMOTE/$TRACK..HEAD | wc -l)
	local CHANGESETS=${CHANGESETS//[[:space:]]}

	if [[ "$run" = true ]]; then
		if [[ "$CHANGESETS" = "0" ]]; then
			die "You have no changes to review. Are you on the right branch?"
		elif [[ "$CHANGESETS" != "1" ]]; then
			warn "You have $CHANGESETS changes, but you should only push one at a time. Did you forget to squash your commits?"
			if ! ask_yes_no "Continue?"; then
				die "Existing"
			fi
		fi
	fi


	local change_args=''

	if [[ -z "$CHANGE" ]]; then
		read -e -p "Please enter a branch to push to: " -i "$TRACK" choice
		TRACK=${choice:-$TRACK}
		read -p "Optionally choose a topic [no topic]: " topic

		change_args="$REMOTE HEAD:refs/for/$TRACK"
		if [[ -n "$topic" ]]; then
			change_args="$change_args/$topic"
		fi
	else
		change_args="$REMOTE HEAD:refs/changes/$CHANGE"
	fi

	git push $change_args ||
		die "Could not push your changes for review. Perhaps you need to update first?"

	git_push_output=$(test -f $GIT_OUTPUT_FILE && cat $GIT_OUTPUT_FILE)

	if [[ "$CURRENT" = "$TRACK" ]] && ask_yes_no "Reset to $REMOTE/$TRACK?"; then
		git reset --hard $REMOTE/$TRACK ||
			die "Could not reset your $TRACK branch to $REMOTE/$TRACK."
	fi

	if [[ "$run" = true ]]; then
		url=$(echo "$git_push_output" | grep http | head -n1)

		if [[ -n "$url" ]]; then
			if [[ -n "$BROWSER" ]]; then
				eval "$BROWSER $url"
			else
				good $url
			fi
		fi

		if [[ "$CURRENT" = "$TRACK" ]]; then
			good "Successfully pushed '$LOG' for review and reset $TRACK"
		else
			good "Successfully pushed '$LOG' for review"
		fi
	fi
}

# git review 100
startReview() {
	abort_on_bad_repo_state

	# create a new branch based on the current tracking branch to work in
	local branch=r$CHANGE
	$GIT branch -D $branch 2>/dev/null 1>&2
	git checkout -b $branch $TRACK ||
		die "Unable to create a new branch '$branch'"

	# apply the change to the new branch
	gerrit-cherry-pick $REMOTE $CHANGE ||
		die "Unable to apply ±$CHANGE on top of $TRACK"

	if [[ "$verbose" = true ]]; then
		good "Successfully cherry-picked ±$CHANGE so you can begin reviewing it"
	fi
}


# git review reset
resetReview() {

	if [[ "$1" == "-f" ]]; then
		git reset --hard
	else
		abort_on_bad_repo_state
	fi

	# clean up after gerrit-cherry-pick if it failed
	rm -rf "$GIT_DIR/rebase-gerrit"
	# clean up TRACK file
	rm -rf "$GIT_DIR/TRACK"

	if [[ ${CURRENT:0:1} == "r" ]] && is_integer ${CURRENT:1}; then
		git checkout $TRACK && git branch -D $CURRENT ||
			die "Unable to close the review branch $CURRENT"
	else
		die "We are not on a review branch ($CURRENT)"
	fi
}

approveChange() {

	if is_integer $CHANGE; then
		local PATCH=$(patch_count_for_change $CHANGE)
	else
		die "You must be on a review branch or provide a change number via\n $this -c # approve"
	fi

	local url_line=$($GIT remote show -n origin | grep "Push  URL: " | head -n1)
	local host_and_project=${url_line# *URL: }

	local host
	local project
	local port

	if [[ "$host_and_project" =~ "ssh://" ]]; then
		host_and_project=${host_and_project#ssh://}
		local host_and_port=${host_and_project%/*}

		if [[ "$host_and_port" =~ ":" ]]; then
			host=${host_and_port%:*}
			port=${host_and_port#*:}
		else
			host=${host_and_port}
			port=""
		fi
		project=${host_and_project#*/}
	else
		host=${host_and_project%:*}
		project=${host_and_project#*:}
		port=""
	fi

	port=${port%/*}
	if [[ ! -z "$port" ]]; then
		port="-p $port"
	fi

	local LOG=$($GIT log --pretty="format:%s" $REMOTE/$TRACK..HEAD)
	good "Approving '$LOG'..."

	local plus_one="+1"

	read -e -i "+1" -p "Verified: " VERIFIED
	VERIFIED="${VERIFIED:-$plus_one}"
	read -e -i "+1" -p "Code review: " CODE_REVIEW
	CODE_REVIEW="${CODE_REVIEW:-"$plus_one"}"

	echo "You may supply a message. Hit return once your are done."
	read -e -p "Message: " MESSAGE

	MESSAGE=$(cat $GIT_OUTPUT_FILE |tr '\n' ' ')

	local CMD="$host $port gerrit approve"
	CMD="$CMD --verified=$VERIFIED"
	CMD="$CMD --code-review=$CODE_REVIEW"
	CMD="$CMD --project=$project $CHANGE,$PATCH"
	if [[ -n $MESSAGE ]]; then
		CMD="$CMD --message=\"$MESSAGE\""
	fi

	ssh $CMD

	if ask_yes_no "Reset review branch?"; then
		resetReview
	fi
}

diffPatches() {
	getBranchInfo

	get_change_number_from_branch ||
		die "Unable to get change number from $CURRENT"
	local change=$CHANGE

	local changeref=refs/remotes/changes/${change:(-2)}/$change

	case $# in
		0)
			local patch2=$(patch_count_for_change $change)
			local patch1=$((patch2 - 1))
			;;
		1)
			local patch2=$(patch_count_for_change $change)
			local patch1=$1
			;;
		2)
			local patch1=$1
			local patch2=$2
			;;
		3)
			local change=$1
			local patch1=$2
			local patch2=$3
			;;
		*)
			printShortUsage
			die "too many arguments"
			;;
	esac

	if [[ "$patch1" = "$patch2" ]] || [[ "$patch1" = 0 ]]; then
		die "Only one patchset--nothing to diff!"
	fi

	if [[ "$verbose" = true ]]; then
		good "Diffing patchset $patch1 vs patchset $patch2"
	fi

	local branch1="r$change,$patch1"
	local branch2="r$change,$patch2"

	# create a branch for patch1
	git checkout -b $branch1 $TRACK >/dev/null 2>&1 ||
		die "Unable to create a new branch '$branch1'"
	gerrit-cherry-pick $REMOTE $change/$patch1 >/dev/null 2>&1 ||
		die "Unable to apply ±$branch1 on top of $TRACK"

	# create a branch for patch2
	git checkout -b $branch2 $TRACK >/dev/null 2>&1 ||
		die "Unable to create a new branch '$branch2'"
	gerrit-cherry-pick $REMOTE $change/$patch2 >/dev/null 2>&1 ||
		die "Unable to apply ±$branch2 on top of $TRACK"

	# actually show the diff
	git diff --src-prefix=$branch1: --dst-prefix=$branch2: --color $branch1 $branch2 > $GIT_OUTPUT_FILE
	less -rf $GIT_OUTPUT_FILE
	rm -f $GIT_OUTPUT_FILE

	git checkout "$CURRENT" >/dev/null 2>&1 ||
		die "Unable to switch back to $CURRENT"

	git branch -D $branch1 $branch2 >/dev/null 2>&1 ||
		die "Unable to delete temporary patch branches"
}

rebaseReview() {
	abort_on_bad_repo_state

	if [[ -z "$CHANGE" ]]; then
		printShortUsage
		die "Please provide a change number to rebase."
	fi

	if ! is_review_branch $CURRENT; then
		# if not already on a review branch, fetch and check it out
		startReview
	fi

	# try to push this patch along
	pushReview

	# reset if we weren't already on a review branch
	if ! is_review_branch $CURRENT; then
		resetReview
	fi
}

updateReview() {
	if ! is_review_branch $CURRENT; then
		warn "$CURRENT is not a review branch"
		printUsage
		exit 2
	fi

	abort_on_bad_repo_state

	CHANGE=${CURRENT:1}
	resetReview
	startReview
}

openReview() {

	if [[ ! -z $CHANGE ]]; then
		echo "Using change $CHANGE from command line"
	elif ! get_change_number_from_branch; then
		warn "$CURRENT is not a review branch"
		exit 2
	fi

	local url_line=$($GIT remote show -n origin | grep "Push  URL: " | head -n1)
	local host_and_project=${url_line# *URL: }

	local host
	local project
	local port

	if [[ "$host_and_project" =~ "ssh://" ]]; then
		host_and_project=${host_and_project#ssh://}
		local host_and_port=${host_and_project%/*}

		if [[ "$host_and_port" =~ ":" ]]; then
			host=${host_and_port%:*}
			port=${host_and_port#*:}
		else
			host=${host_and_port}
		fi
	else
		host=${host_and_project%:*}
	fi

	if [[ $host ]]; then
		if [[ -z "$BROWSER" ]]; then
			warn "BROWSER is not set. Sorry."
			echo "http://$host/$CHANGE"
		else
			if [[ "$verbose" = true ]]; then
				echo "Using $BROWSER to open http://$host/$CHANGE"
			fi
			if [[ "$run" = true ]]; then
				eval "$BROWSER http://$host/$CHANGE"
			fi
		fi
	else
		warn "Could not get the URL of gerrit"
		exit 2
	fi
	exit 0
}

abort_on_bad_repo_state() {
	if ! no_changes; then
		die "You have local changes. Please do something with them before using $this"
	fi
}


#### now parse arguments ####

getBranchInfo
get_change_number_from_branch

while true; do
	arg=$1
	shift
	test -z "$arg" && break;

	case $arg in
		-e | --explain | --dry-run)
			echo "$this: using explain-only mode"
			explain=true
			verbose=true
			run=false
			;;
		-v | --verbose)
			verbose=true
			;;
		-q | --quiet)
			verbose=false
			;;
		-h | --help | help)
			printUsage
			exit
			;;
		-c)
			if is_integer $1; then
				CHANGE=$1
			else
				die "Change number must be an integer ($1)"
			fi
			shift
			;;
		start)
			if is_integer $1; then
				CHANGE=$1
			else
				if [[ -n $1 ]]; then
					die "The change number must be an integer."
				fi
			fi
			startReview
			exit
			;;
		reset)
			if [[ -n $1 ]] && [[ $1 != "-f" ]]; then
				die "Only -f may be use as an argument for reset"
			fi
			resetReview $1
			exit
			;;
		push)
			pushReview
			exit
			;;
		diff)
			diffPatches $1 $2 $3
			exit
			;;
		rebase)
			if is_integer $1; then
				CHANGE=$1
			else
				if [[ -n $1 ]]; then
					die "The change number must be an integer."
				fi
			fi
			rebaseReview
			exit
			;;
		approve)
			approveChange
			exit
			;;
		update)
			updateReview
			exit
			;;
		open)
			if is_integer $1; then
				CHANGE=$1
			else
				if [[ -n $1 ]]; then
					die "The change number must be an integer."
				fi
			fi
			openReview
			exit
			;;
		*)
			if is_integer $arg; then
				CHANGE=$arg
				startReview
				exit
			else
				warn "$this: unrecognized option or subcommand $arg"
				printUsage
				exit 2
			fi
			;;
	esac
done

# no subcommand given
printShortUsage
exit 2
